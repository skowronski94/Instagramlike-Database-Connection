#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestLINQ
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="generailDB")]
	public partial class InstagramDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertuser(user instance);
    partial void Updateuser(user instance);
    partial void Deleteuser(user instance);
    partial void Insertphoto(photo instance);
    partial void Updatephoto(photo instance);
    partial void Deletephoto(photo instance);
    partial void Insertcomment(comment instance);
    partial void Updatecomment(comment instance);
    partial void Deletecomment(comment instance);
    partial void Insertfollow(follow instance);
    partial void Updatefollow(follow instance);
    partial void Deletefollow(follow instance);
    partial void Insertlike(like instance);
    partial void Updatelike(like instance);
    partial void Deletelike(like instance);
    partial void Insertphoto_tag(photo_tag instance);
    partial void Updatephoto_tag(photo_tag instance);
    partial void Deletephoto_tag(photo_tag instance);
    partial void Inserttag(tag instance);
    partial void Updatetag(tag instance);
    partial void Deletetag(tag instance);
    #endregion
		
		public InstagramDataContext() : 
				base(global::TestLINQ.Properties.Settings.Default.generailDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public InstagramDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public InstagramDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public InstagramDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public InstagramDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<user> users
		{
			get
			{
				return this.GetTable<user>();
			}
		}
		
		public System.Data.Linq.Table<photo> photos
		{
			get
			{
				return this.GetTable<photo>();
			}
		}
		
		public System.Data.Linq.Table<comment> comments
		{
			get
			{
				return this.GetTable<comment>();
			}
		}
		
		public System.Data.Linq.Table<follow> follows
		{
			get
			{
				return this.GetTable<follow>();
			}
		}
		
		public System.Data.Linq.Table<like> likes
		{
			get
			{
				return this.GetTable<like>();
			}
		}
		
		public System.Data.Linq.Table<photo_tag> photo_tags
		{
			get
			{
				return this.GetTable<photo_tag>();
			}
		}
		
		public System.Data.Linq.Table<tag> tags
		{
			get
			{
				return this.GetTable<tag>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.users")]
	public partial class user : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _username;
		
		private System.Nullable<System.DateTime> _created_at;
		
		private EntitySet<photo> _photos;
		
		private EntitySet<comment> _comments;
		
		private EntitySet<follow> _follows;
		
		private EntitySet<follow> _follows1;
		
		private EntitySet<like> _likes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void Oncreated_atChanging(System.Nullable<System.DateTime> value);
    partial void Oncreated_atChanged();
    #endregion
		
		public user()
		{
			this._photos = new EntitySet<photo>(new Action<photo>(this.attach_photos), new Action<photo>(this.detach_photos));
			this._comments = new EntitySet<comment>(new Action<comment>(this.attach_comments), new Action<comment>(this.detach_comments));
			this._follows = new EntitySet<follow>(new Action<follow>(this.attach_follows), new Action<follow>(this.detach_follows));
			this._follows1 = new EntitySet<follow>(new Action<follow>(this.attach_follows1), new Action<follow>(this.detach_follows1));
			this._likes = new EntitySet<like>(new Action<like>(this.attach_likes), new Action<like>(this.detach_likes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created_at", DbType="DateTime")]
		public System.Nullable<System.DateTime> created_at
		{
			get
			{
				return this._created_at;
			}
			set
			{
				if ((this._created_at != value))
				{
					this.Oncreated_atChanging(value);
					this.SendPropertyChanging();
					this._created_at = value;
					this.SendPropertyChanged("created_at");
					this.Oncreated_atChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_photo", Storage="_photos", ThisKey="id", OtherKey="user_id")]
		public EntitySet<photo> photos
		{
			get
			{
				return this._photos;
			}
			set
			{
				this._photos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_comment", Storage="_comments", ThisKey="id", OtherKey="user_id")]
		public EntitySet<comment> comments
		{
			get
			{
				return this._comments;
			}
			set
			{
				this._comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_follow", Storage="_follows", ThisKey="id", OtherKey="follower_id")]
		public EntitySet<follow> follows
		{
			get
			{
				return this._follows;
			}
			set
			{
				this._follows.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_follow1", Storage="_follows1", ThisKey="id", OtherKey="followee_id")]
		public EntitySet<follow> follows1
		{
			get
			{
				return this._follows1;
			}
			set
			{
				this._follows1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_like", Storage="_likes", ThisKey="id", OtherKey="user_id")]
		public EntitySet<like> likes
		{
			get
			{
				return this._likes;
			}
			set
			{
				this._likes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_photos(photo entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_photos(photo entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_comments(comment entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_comments(comment entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_follows(follow entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_follows(follow entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_follows1(follow entity)
		{
			this.SendPropertyChanging();
			entity.user1 = this;
		}
		
		private void detach_follows1(follow entity)
		{
			this.SendPropertyChanging();
			entity.user1 = null;
		}
		
		private void attach_likes(like entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_likes(like entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.photos")]
	public partial class photo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _image_url;
		
		private int _user_id;
		
		private System.Nullable<System.DateTime> _created_at;
		
		private EntitySet<comment> _comments;
		
		private EntitySet<like> _likes;
		
		private EntitySet<photo_tag> _photo_tags;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onimage_urlChanging(string value);
    partial void Onimage_urlChanged();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void Oncreated_atChanging(System.Nullable<System.DateTime> value);
    partial void Oncreated_atChanged();
    #endregion
		
		public photo()
		{
			this._comments = new EntitySet<comment>(new Action<comment>(this.attach_comments), new Action<comment>(this.detach_comments));
			this._likes = new EntitySet<like>(new Action<like>(this.attach_likes), new Action<like>(this.detach_likes));
			this._photo_tags = new EntitySet<photo_tag>(new Action<photo_tag>(this.attach_photo_tags), new Action<photo_tag>(this.detach_photo_tags));
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_image_url", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string image_url
		{
			get
			{
				return this._image_url;
			}
			set
			{
				if ((this._image_url != value))
				{
					this.Onimage_urlChanging(value);
					this.SendPropertyChanging();
					this._image_url = value;
					this.SendPropertyChanged("image_url");
					this.Onimage_urlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL")]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created_at", DbType="DateTime")]
		public System.Nullable<System.DateTime> created_at
		{
			get
			{
				return this._created_at;
			}
			set
			{
				if ((this._created_at != value))
				{
					this.Oncreated_atChanging(value);
					this.SendPropertyChanging();
					this._created_at = value;
					this.SendPropertyChanged("created_at");
					this.Oncreated_atChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="photo_comment", Storage="_comments", ThisKey="id", OtherKey="photo_id")]
		public EntitySet<comment> comments
		{
			get
			{
				return this._comments;
			}
			set
			{
				this._comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="photo_like", Storage="_likes", ThisKey="id", OtherKey="photo_id")]
		public EntitySet<like> likes
		{
			get
			{
				return this._likes;
			}
			set
			{
				this._likes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="photo_photo_tag", Storage="_photo_tags", ThisKey="id", OtherKey="photo_id")]
		public EntitySet<photo_tag> photo_tags
		{
			get
			{
				return this._photo_tags;
			}
			set
			{
				this._photo_tags.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_photo", Storage="_user", ThisKey="user_id", OtherKey="id", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.photos.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.photos.Add(this);
						this._user_id = value.id;
					}
					else
					{
						this._user_id = default(int);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_comments(comment entity)
		{
			this.SendPropertyChanging();
			entity.photo = this;
		}
		
		private void detach_comments(comment entity)
		{
			this.SendPropertyChanging();
			entity.photo = null;
		}
		
		private void attach_likes(like entity)
		{
			this.SendPropertyChanging();
			entity.photo = this;
		}
		
		private void detach_likes(like entity)
		{
			this.SendPropertyChanging();
			entity.photo = null;
		}
		
		private void attach_photo_tags(photo_tag entity)
		{
			this.SendPropertyChanging();
			entity.photo = this;
		}
		
		private void detach_photo_tags(photo_tag entity)
		{
			this.SendPropertyChanging();
			entity.photo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.comments")]
	public partial class comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _comment_text;
		
		private int _photo_id;
		
		private int _user_id;
		
		private System.Nullable<System.DateTime> _created_at;
		
		private EntityRef<photo> _photo;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Oncomment_textChanging(string value);
    partial void Oncomment_textChanged();
    partial void Onphoto_idChanging(int value);
    partial void Onphoto_idChanged();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void Oncreated_atChanging(System.Nullable<System.DateTime> value);
    partial void Oncreated_atChanged();
    #endregion
		
		public comment()
		{
			this._photo = default(EntityRef<photo>);
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comment_text", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string comment_text
		{
			get
			{
				return this._comment_text;
			}
			set
			{
				if ((this._comment_text != value))
				{
					this.Oncomment_textChanging(value);
					this.SendPropertyChanging();
					this._comment_text = value;
					this.SendPropertyChanged("comment_text");
					this.Oncomment_textChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_photo_id", DbType="Int NOT NULL")]
		public int photo_id
		{
			get
			{
				return this._photo_id;
			}
			set
			{
				if ((this._photo_id != value))
				{
					if (this._photo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onphoto_idChanging(value);
					this.SendPropertyChanging();
					this._photo_id = value;
					this.SendPropertyChanged("photo_id");
					this.Onphoto_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL")]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created_at", DbType="DateTime")]
		public System.Nullable<System.DateTime> created_at
		{
			get
			{
				return this._created_at;
			}
			set
			{
				if ((this._created_at != value))
				{
					this.Oncreated_atChanging(value);
					this.SendPropertyChanging();
					this._created_at = value;
					this.SendPropertyChanged("created_at");
					this.Oncreated_atChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="photo_comment", Storage="_photo", ThisKey="photo_id", OtherKey="id", IsForeignKey=true)]
		public photo photo
		{
			get
			{
				return this._photo.Entity;
			}
			set
			{
				photo previousValue = this._photo.Entity;
				if (((previousValue != value) 
							|| (this._photo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._photo.Entity = null;
						previousValue.comments.Remove(this);
					}
					this._photo.Entity = value;
					if ((value != null))
					{
						value.comments.Add(this);
						this._photo_id = value.id;
					}
					else
					{
						this._photo_id = default(int);
					}
					this.SendPropertyChanged("photo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_comment", Storage="_user", ThisKey="user_id", OtherKey="id", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.comments.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.comments.Add(this);
						this._user_id = value.id;
					}
					else
					{
						this._user_id = default(int);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.follows")]
	public partial class follow : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _follower_id;
		
		private int _followee_id;
		
		private System.Nullable<System.DateTime> _created_at;
		
		private EntityRef<user> _user;
		
		private EntityRef<user> _user1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onfollower_idChanging(int value);
    partial void Onfollower_idChanged();
    partial void Onfollowee_idChanging(int value);
    partial void Onfollowee_idChanged();
    partial void Oncreated_atChanging(System.Nullable<System.DateTime> value);
    partial void Oncreated_atChanged();
    #endregion
		
		public follow()
		{
			this._user = default(EntityRef<user>);
			this._user1 = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_follower_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int follower_id
		{
			get
			{
				return this._follower_id;
			}
			set
			{
				if ((this._follower_id != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfollower_idChanging(value);
					this.SendPropertyChanging();
					this._follower_id = value;
					this.SendPropertyChanged("follower_id");
					this.Onfollower_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_followee_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int followee_id
		{
			get
			{
				return this._followee_id;
			}
			set
			{
				if ((this._followee_id != value))
				{
					if (this._user1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfollowee_idChanging(value);
					this.SendPropertyChanging();
					this._followee_id = value;
					this.SendPropertyChanged("followee_id");
					this.Onfollowee_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created_at", DbType="DateTime")]
		public System.Nullable<System.DateTime> created_at
		{
			get
			{
				return this._created_at;
			}
			set
			{
				if ((this._created_at != value))
				{
					this.Oncreated_atChanging(value);
					this.SendPropertyChanging();
					this._created_at = value;
					this.SendPropertyChanged("created_at");
					this.Oncreated_atChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_follow", Storage="_user", ThisKey="follower_id", OtherKey="id", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.follows.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.follows.Add(this);
						this._follower_id = value.id;
					}
					else
					{
						this._follower_id = default(int);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_follow1", Storage="_user1", ThisKey="followee_id", OtherKey="id", IsForeignKey=true)]
		public user user1
		{
			get
			{
				return this._user1.Entity;
			}
			set
			{
				user previousValue = this._user1.Entity;
				if (((previousValue != value) 
							|| (this._user1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user1.Entity = null;
						previousValue.follows1.Remove(this);
					}
					this._user1.Entity = value;
					if ((value != null))
					{
						value.follows1.Add(this);
						this._followee_id = value.id;
					}
					else
					{
						this._followee_id = default(int);
					}
					this.SendPropertyChanged("user1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.likes")]
	public partial class like : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _user_id;
		
		private int _photo_id;
		
		private System.Nullable<System.DateTime> _created_at;
		
		private EntityRef<photo> _photo;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void Onphoto_idChanging(int value);
    partial void Onphoto_idChanged();
    partial void Oncreated_atChanging(System.Nullable<System.DateTime> value);
    partial void Oncreated_atChanged();
    #endregion
		
		public like()
		{
			this._photo = default(EntityRef<photo>);
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_photo_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int photo_id
		{
			get
			{
				return this._photo_id;
			}
			set
			{
				if ((this._photo_id != value))
				{
					if (this._photo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onphoto_idChanging(value);
					this.SendPropertyChanging();
					this._photo_id = value;
					this.SendPropertyChanged("photo_id");
					this.Onphoto_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created_at", DbType="DateTime")]
		public System.Nullable<System.DateTime> created_at
		{
			get
			{
				return this._created_at;
			}
			set
			{
				if ((this._created_at != value))
				{
					this.Oncreated_atChanging(value);
					this.SendPropertyChanging();
					this._created_at = value;
					this.SendPropertyChanged("created_at");
					this.Oncreated_atChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="photo_like", Storage="_photo", ThisKey="photo_id", OtherKey="id", IsForeignKey=true)]
		public photo photo
		{
			get
			{
				return this._photo.Entity;
			}
			set
			{
				photo previousValue = this._photo.Entity;
				if (((previousValue != value) 
							|| (this._photo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._photo.Entity = null;
						previousValue.likes.Remove(this);
					}
					this._photo.Entity = value;
					if ((value != null))
					{
						value.likes.Add(this);
						this._photo_id = value.id;
					}
					else
					{
						this._photo_id = default(int);
					}
					this.SendPropertyChanged("photo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_like", Storage="_user", ThisKey="user_id", OtherKey="id", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.likes.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.likes.Add(this);
						this._user_id = value.id;
					}
					else
					{
						this._user_id = default(int);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.photo_tags")]
	public partial class photo_tag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _photo_id;
		
		private int _tag_id;
		
		private EntityRef<photo> _photo;
		
		private EntityRef<tag> _tag;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onphoto_idChanging(int value);
    partial void Onphoto_idChanged();
    partial void Ontag_idChanging(int value);
    partial void Ontag_idChanged();
    #endregion
		
		public photo_tag()
		{
			this._photo = default(EntityRef<photo>);
			this._tag = default(EntityRef<tag>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_photo_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int photo_id
		{
			get
			{
				return this._photo_id;
			}
			set
			{
				if ((this._photo_id != value))
				{
					if (this._photo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onphoto_idChanging(value);
					this.SendPropertyChanging();
					this._photo_id = value;
					this.SendPropertyChanged("photo_id");
					this.Onphoto_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tag_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int tag_id
		{
			get
			{
				return this._tag_id;
			}
			set
			{
				if ((this._tag_id != value))
				{
					if (this._tag.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ontag_idChanging(value);
					this.SendPropertyChanging();
					this._tag_id = value;
					this.SendPropertyChanged("tag_id");
					this.Ontag_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="photo_photo_tag", Storage="_photo", ThisKey="photo_id", OtherKey="id", IsForeignKey=true)]
		public photo photo
		{
			get
			{
				return this._photo.Entity;
			}
			set
			{
				photo previousValue = this._photo.Entity;
				if (((previousValue != value) 
							|| (this._photo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._photo.Entity = null;
						previousValue.photo_tags.Remove(this);
					}
					this._photo.Entity = value;
					if ((value != null))
					{
						value.photo_tags.Add(this);
						this._photo_id = value.id;
					}
					else
					{
						this._photo_id = default(int);
					}
					this.SendPropertyChanged("photo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tag_photo_tag", Storage="_tag", ThisKey="tag_id", OtherKey="id", IsForeignKey=true)]
		public tag tag
		{
			get
			{
				return this._tag.Entity;
			}
			set
			{
				tag previousValue = this._tag.Entity;
				if (((previousValue != value) 
							|| (this._tag.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tag.Entity = null;
						previousValue.photo_tags.Remove(this);
					}
					this._tag.Entity = value;
					if ((value != null))
					{
						value.photo_tags.Add(this);
						this._tag_id = value.id;
					}
					else
					{
						this._tag_id = default(int);
					}
					this.SendPropertyChanged("tag");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tags")]
	public partial class tag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _tag_name;
		
		private System.Nullable<System.DateTime> _created_at;
		
		private EntitySet<photo_tag> _photo_tags;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Ontag_nameChanging(string value);
    partial void Ontag_nameChanged();
    partial void Oncreated_atChanging(System.Nullable<System.DateTime> value);
    partial void Oncreated_atChanged();
    #endregion
		
		public tag()
		{
			this._photo_tags = new EntitySet<photo_tag>(new Action<photo_tag>(this.attach_photo_tags), new Action<photo_tag>(this.detach_photo_tags));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tag_name", DbType="VarChar(255)")]
		public string tag_name
		{
			get
			{
				return this._tag_name;
			}
			set
			{
				if ((this._tag_name != value))
				{
					this.Ontag_nameChanging(value);
					this.SendPropertyChanging();
					this._tag_name = value;
					this.SendPropertyChanged("tag_name");
					this.Ontag_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created_at", DbType="DateTime")]
		public System.Nullable<System.DateTime> created_at
		{
			get
			{
				return this._created_at;
			}
			set
			{
				if ((this._created_at != value))
				{
					this.Oncreated_atChanging(value);
					this.SendPropertyChanging();
					this._created_at = value;
					this.SendPropertyChanged("created_at");
					this.Oncreated_atChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tag_photo_tag", Storage="_photo_tags", ThisKey="id", OtherKey="tag_id")]
		public EntitySet<photo_tag> photo_tags
		{
			get
			{
				return this._photo_tags;
			}
			set
			{
				this._photo_tags.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_photo_tags(photo_tag entity)
		{
			this.SendPropertyChanging();
			entity.tag = this;
		}
		
		private void detach_photo_tags(photo_tag entity)
		{
			this.SendPropertyChanging();
			entity.tag = null;
		}
	}
}
#pragma warning restore 1591
